1) While performing manual tests and monitoring automated test runs, whether there are any obvious visible UI errors seen or not, how can you monitor for issues, hidden or otherwise, on both the client and server side?

https://www.3pillarglobal.com/insights/how-to-capture-javascript-errors-from-your-web-application

https://advancedweb.hu/2016/03/29/selenium-tes-logs/
http://samsaccone.com/posts/logging-js-errors-with-selenium-webdriver.html

ssh to server and tail log file, papertrail, sentry


2) When testing a web app manually or via automation, how can you test for (client side) usability and performance?

browsermob proxy, fiddlers

As for UX testing:
1. Test the site Navigation:
Menus, buttons or Links to different pages on your site should be easily visible and consistent on all webpages

2. Test the Content:
Content should be legible with no spelling or grammatical errors.
Images if present should contain an "alt" text

2) Usability Testing:

Test for navigation:
Navigation means how an user surfs the web pages, different controls like buttons, boxes or how the user uses the links on the pages to surf different pages.
Usability testing includes the following:

Website should be easy to use.
Instructions provided should be very clear.
Check if the instructions provided are perfect to satisfy its purpose.
Main menu should be provided on each page.
It should be consistent enough.
Content checking:

Content should be logical and easy to understand. Check for spelling errors. Usage  of dark colours annoys the users and should not be used in the site theme. You can follow some standard colours that are used for web page and content building. These are the common accepted standards like what I mentioned above about annoying colours, fonts, frames etc.
Content should be meaningful. All the anchor text links should be working properly. Images should be placed properly with proper sizes.
These are some of basic important standards that should be followed in web development. Your task is to validate all for UI testing.

Other user information for user help:
Like search option, sitemap also help files etc. Sitemap should be present with all the links in websites with proper tree view of navigation. Check for all links on the sitemap.

“Search in the site” option will help users to find content pages that they are looking for easily and quickly. These are all optional items and if present they should be validated.


Performance testing:
http://w3c.github.io/navigation-timing/
http://deanhume.com/home/blogpost/measuring-web-page-performance-with-selenium-2-and-the-web-timings-api/56
Browsermob
http://www.automationace.com/2014/04/measuring-performance-using-selenium-webdriver-with-navigation-timing.html
http://www.automationace.com/2014/04/measuring-performance-using-timer-selenium-webdriver.html
http://www.automationace.com/2014/04/measuring-performance-with-browsermob-proxy-using-selenium-webdriver.html

3) How do you reverse engineer AJAX calls and (REST) web service API calls made by a website or web application (which you can’t see via the UI)?

Open browser console and check network tab

4) What goes into the body of a good bug report?

1. Bug summary (title)
2. Bug severity (trivial, minor, major, critical, blocker)
3. Bug priority (p1, p2, p3)
4. Component (part of the system (payments, subscriptions etc) or backend/frontend)
5. Environment (Browser, Server)
6. Test data used: user (login/password) etc.
7. Steps to reproduce:

1. Open url ...
2. ...
....
n. ...

Actual result: ...
Expected result: ...

Attachments - screenshots, browser/server logs, .gif / .mov files


5) Could you describe the way how to run testing in the agile environment?

